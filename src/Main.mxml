<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:ui="ui.*"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               creationComplete="onComplete(event)">

    <fx:Style source="/assets/css/global.css"/>

    <fx:Script><![CDATA[
        import global.Icons;
        import global.State;
        import global.Util;

        import mx.collections.ArrayCollection;

        import mx.events.FlexEvent;
        import mx.managers.ToolTipManager;

        import net.Client;
        import net.ClientMessageType;
        import net.Message;
        import net.Server;

        import spark.events.IndexChangeEvent;

        import ui.Console;
        import ui.popups.AvatarPopup;
        import ui.popups.InfoPopup;
        import ui.popups.InputPopup;

        private var server:Server;
        private var client:Client;

        private var state:State;

        private function onComplete(event:FlexEvent):void
        {
            state = State.instance;

            listParty.dataProvider = state.party;
            listChat.dataProvider = state.messages;

            // Tooltip setup
            ToolTipManager.showDelay = 0;
            ToolTipManager.toolTipClass = ToolTip;

            inputConsole.addEventListener(KeyboardEvent.KEY_DOWN, function (keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.keyCode == Keyboard.ENTER && inputConsole.text.length > 0)
                {
                    // Input console
                    command(inputConsole.text);
                    inputConsole.text = "";
                }
            });

            inputChat.addEventListener(KeyboardEvent.KEY_DOWN, function (keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.keyCode == Keyboard.ENTER && inputChat.text.length > 0)
                {
                    // Input chat
                    client.send(new Message(ClientMessageType.SEND_CHAT, inputChat.text));
                    inputChat.text = "";
                }
            });
        }

        private function command(str:String):void
        {
            // A Console command
            Console.log(str, Console.INPUT);

            var cmd:Array = str.split(" ");
            if (cmd.length == 0)
                return;

            switch (cmd[0])
            {
                case "net":
                    Console.log(Util.formatNetworkInfo(), "config");
                    break;
                case "host":
                    if (!server && !client)
                    {
                        client = new Client();
                        server = new Server(client);

                        client.connectToSelf(server);

                        var p:InfoPopup = new InfoPopup();
                        p.header = "Server started";
                        p.description = "Server started on port " + Util.PORT;
                        PopupManager.open(p);

                        startApp();
                    }
                    break;
                case "connect":
                    if (!server && !client)
                    {
                        client = new Client();
                        client.addEventListener(Event.CONNECT, onConnect);
                    }
                    client.connect(cmd.length > 1 ? cmd[1] : "127.0.0.1");
                    break;
                case "id":
                    // Identify a user
                    client.send(new Message(ClientMessageType.GET_ID));
                    break;
                case "party":
                    // List the watch party
                    client.send(new Message(ClientMessageType.GET_PARTY));
                    break;
                case "chat":
                    // Send chat
                    cmd.shift();
                    client.send(new Message(ClientMessageType.SEND_CHAT, cmd.join(" ")));
                    break;
                default:
                    Console.log("'" + str + "' isn't a recognized command\nType 'help' for a list of commands", Console.ALERT);
                    break;
            }
        }

        private function onConnect(event:Event):void
        {
            PopupManager.close();
            startApp();
        }

        private function startApp():void
        {
            groupConnect.visible = groupConnect.includeInLayout = false;
            groupApp.visible = groupApp.includeInLayout = true;
        }

        private function onChangeConnectionType(event:IndexChangeEvent):void
        {
            callLater(function ():void
            {
                focusManager.setFocus(inputAddress);
            });
        }

        private function onClickConnect(event:MouseEvent):void
        {
            var p:InfoPopup = new InfoPopup();
            p.header = "Connecting";
            p.description = "Connecting to '" + inputAddress.text + "' on port " + Util.PORT;
            p.showConfirmButton = false;
            PopupManager.open(p);

            command("connect " + inputAddress.text);
        }

        private function onClickStartServer(event:MouseEvent):void
        {
            command("host");
        }

        private function onClickEditName(event:MouseEvent):void
        {
            var p:InputPopup = new InputPopup();
            p.header = "Edit name";
            p.description = "Enter a new name.";
            p.callbackConfirm = editName;
            PopupManager.open(p);
        }

        private function editName(newName:String):void
        {
            client.send(new Message(ClientMessageType.SET_NAME, newName));
        }

        private function onClickEditAvatar(event:MouseEvent):void
        {
            var p:AvatarPopup = new AvatarPopup();
            p.callbackConfirm = editAvatar;
            PopupManager.open(p);
        }

        private function editAvatar(newAvatar:String):void
        {
            client.send(new Message(ClientMessageType.SET_AVATAR, newAvatar));
        }
        ]]></fx:Script>

    <s:HGroup width="100%"
              height="100%"
              padding="10">

        <!--Connect-->
        <s:VGroup id="groupConnect"
                  width="400"
                  height="100%"
                  horizontalAlign="center">
            <s:VGroup padding="40">
                <s:BitmapImage source="{Icons.Logo}"/>
            </s:VGroup>
            <s:ButtonBar dataProvider="{myViewStack}"
                         change="onChangeConnectionType(event)"
                         requireSelection="true"/>
            <mx:ViewStack id="myViewStack"
                          width="100%">

                <s:NavigatorContent id="navConnect"
                                    label="Connect"
                                    width="100%">
                    <s:VGroup width="100%"
                              padding="10"
                              horizontalAlign="center">
                        <s:TextInput id="inputAddress"
                                     width="200"
                                     focusAlpha="0"/>
                        <s:CheckBox label="Remember"/>
                        <s:Button label="Connect"
                                  click="onClickConnect(event)"/>
                        <s:Label id="labelConnectInfo"/>
                    </s:VGroup>
                </s:NavigatorContent>

                <s:NavigatorContent id="navHost"
                                    label="Host"
                                    width="100%">
                    <s:VGroup width="100%"
                              padding="10"
                              horizontalAlign="center">
                        <s:Button label="Start server"
                                  click="onClickStartServer(event)"/>
                    </s:VGroup>
                </s:NavigatorContent>

            </mx:ViewStack>
        </s:VGroup>

        <s:VGroup id="groupApp"
                  width="400"
                  includeInLayout="false"
                  visible="false"
                  verticalAlign="middle">

            <s:Panel width="100%">
                <s:VGroup width="100%">
                    <s:Label text="Profile and Party"/>
                    <s:HGroup width="100%">
                        <s:Button label="Edit Name"
                                  click="onClickEditName(event)"/>
                        <s:Button label="Choose Avatar"
                                  click="onClickEditAvatar(event)"/>
                        <s:List id="listParty"
                                width="100%"
                                useVirtualLayout="false"
                                itemRenderer="ui.renderers.PartyMemberItemRenderer"
                                borderVisible="false">
                            <s:layout>
                                <s:HorizontalLayout gap="5"
                                                    horizontalAlign="right"/>
                            </s:layout>
                        </s:List>
                    </s:HGroup>
                    <s:List id="listChat"
                            width="100%"
                            height="200"
                            itemRenderer="ui.renderers.ChatItemRenderer"
                            horizontalScrollPolicy="off"
                            borderVisible="false"
                            contentBackgroundAlpha="0"/>

                    <s:TextInput id="inputChat"
                                 width="100%"
                                 focusAlpha="0"/>
                </s:VGroup>
            </s:Panel>

        </s:VGroup>


        <!--Console-->
        <s:VGroup width="100%"
                  height="100%"
                  gap="3">

            <ui:Console id="console"
                        width="100%"/>

            <s:TextInput id="inputConsole"
                         width="100%"
                         focusAlpha="0"/>
        </s:VGroup>

    </s:HGroup>

    <ui:Modal width="100%"
              height="100%"/>

</s:Application>