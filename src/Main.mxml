<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:ui="ui.*"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               creationComplete="onComplete(event)">

    <fx:Style source="/assets/css/global.css"/>

    <fx:Script><![CDATA[
        import global.Icons;
        import global.State;
        import global.Util;

        import mx.events.FlexEvent;

        import net.Client;
        import net.ClientMessageType;
        import net.Message;
        import net.Server;

        import spark.events.IndexChangeEvent;

        import ui.Console;
        import ui.popups.InfoPopup;

        private var server:Server;
        private var client:Client;

        private var state:State;

        private function onComplete(event:FlexEvent):void
        {
            state = State.instance;

            inputConsole.addEventListener(KeyboardEvent.KEY_DOWN, function (keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.keyCode == Keyboard.ENTER && inputConsole.text.length > 0)
                {
                    // Input
                    command(inputConsole.text);
                    inputConsole.text = "";
                }
            });

            // Log network information
            Console.log(Util.formatNetworkInfo(), "config");
        }

        private function command(str:String):void
        {
            // A Console command
            Console.log(str, Console.INPUT);

            var cmd:Array = str.split(" ");
            if (cmd.length == 0)
                return;

            switch (cmd[0])
            {
                case "host":
                    if (!server && !client)
                    {
                        client = new Client();
                        server = new Server(client);

                        client.connectToSelf(server);

                        var p:InfoPopup = new InfoPopup();
                        p.header = "Server started";
                        p.description = "Server started on port " + Util.PORT;
                        PopupManager.open(p);
                    }
                    break;
                case "connect":
                    if (!server && !client)
                        client = new Client();
                    client.connect(cmd.length > 1 ? cmd[1] : "127.0.0.1");
                    break;
                case "id":
                    // Identify a user
                    client.send(new Message(ClientMessageType.GET_ID));
                    break;
                case "party":
                    // List the watch party
                    client.send(new Message(ClientMessageType.GET_PARTY));
                    break;
                case "chat":
                    // Send chat
                    cmd.shift();
                    client.send(new Message(ClientMessageType.SEND_CHAT, cmd.join(" ")));
                    break;
                default:
                    Console.log("'" + str + "' isn't a recognized command\nType 'help' for a list of commands", Console.ALERT);
                    break;
            }
        }

        private function onChangeConnectionType(event:IndexChangeEvent):void
        {
            callLater(function ():void
            {
                focusManager.setFocus(inputAddress);
            });
        }

        private function onClickConnect(event:MouseEvent):void
        {
            var p:InfoPopup = new InfoPopup();
            p.header = "Connecting...";
            p.description = "Trying to connect";
            p.showConfirmButton = false;
            PopupManager.open(p);
        }

        private function onClickStartServer(event:MouseEvent):void
        {
            command("host");
        }
        ]]></fx:Script>

    <s:HGroup width="100%"
              height="100%"
              padding="10">

        <!--Connect-->
        <s:VGroup width="100%"
                  height="100%"
                  horizontalAlign="center">
            <s:BitmapImage source="{Icons.Logo}"/>
            <s:Label text="Movie Night"/>
            <s:ButtonBar dataProvider="{myViewStack}"
                         change="onChangeConnectionType(event)"
                         requireSelection="true"/>
            <mx:ViewStack id="myViewStack"
                          width="100%">

                <s:NavigatorContent id="navConnect"
                                    label="Connect"
                                    width="100%">
                    <s:VGroup width="100%"
                              padding="10"
                              horizontalAlign="center">
                        <s:TextInput id="inputAddress"
                                     width="200"
                                     focusAlpha="0"/>
                        <s:Button label="Connect"
                                  enabled="{inputAddress.text.length > 0}"
                                  click="onClickConnect(event)"/>
                        <s:Label id="labelConnectInfo"/>
                    </s:VGroup>
                </s:NavigatorContent>

                <s:NavigatorContent id="navHost"
                                    label="Host"
                                    width="100%">
                    <s:VGroup width="100%"
                              padding="10"
                              horizontalAlign="center">
                        <s:Button label="Start server"
                                  click="onClickStartServer(event)"/>
                    </s:VGroup>
                </s:NavigatorContent>

            </mx:ViewStack>
        </s:VGroup>

        <!--Console-->
        <s:VGroup width="100%"
                  height="100%"
                  gap="3">

            <ui:Console id="console"
                        width="100%"/>

            <s:TextInput id="inputConsole"
                         width="100%"
                         focusAlpha="0"/>
        </s:VGroup>

    </s:HGroup>

    <ui:Modal width="100%"
              height="100%"/>

</s:Application>